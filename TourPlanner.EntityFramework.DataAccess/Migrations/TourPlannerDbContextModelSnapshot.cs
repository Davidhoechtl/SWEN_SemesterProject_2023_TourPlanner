// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TourPlanner.EntityFramework.DataAccess;

#nullable disable

namespace TourPlanner.EntityFramework.DataAccess.Migrations
{
    [DbContext(typeof(TourPlannerDbContext))]
    partial class TourPlannerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TourPlanner.DataTransferObjects.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<int>("PostCode")
                        .HasColumnType("integer")
                        .HasColumnName("post_code");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("TourPlanner.DataTransferObjects.Models.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationDestinationId")
                        .HasColumnType("integer")
                        .HasColumnName("location_destination_id");

                    b.Property<int>("LocationStartId")
                        .HasColumnType("integer")
                        .HasColumnName("location_start_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("TravellingType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("travelling_type");

                    b.HasKey("Id")
                        .HasName("pk_tours");

                    b.HasIndex("LocationDestinationId")
                        .IsUnique()
                        .HasDatabaseName("ix_tours_location_destination_id");

                    b.HasIndex("LocationStartId")
                        .IsUnique()
                        .HasDatabaseName("ix_tours_location_start_id");

                    b.ToTable("tours", (string)null);
                });

            modelBuilder.Entity("TourPlanner.DataTransferObjects.Models.Tour", b =>
                {
                    b.HasOne("TourPlanner.DataTransferObjects.Models.Location", "Destination")
                        .WithOne()
                        .HasForeignKey("TourPlanner.DataTransferObjects.Models.Tour", "LocationDestinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tours_locations_location_destination_id");

                    b.HasOne("TourPlanner.DataTransferObjects.Models.Location", "Start")
                        .WithOne()
                        .HasForeignKey("TourPlanner.DataTransferObjects.Models.Tour", "LocationStartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tours_locations_location_start_id");

                    b.Navigation("Destination");

                    b.Navigation("Start");
                });
#pragma warning restore 612, 618
        }
    }
}
